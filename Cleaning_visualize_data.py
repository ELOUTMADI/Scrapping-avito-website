# -*- coding: utf-8 -*-
"""Gestion des donnés + Visualisation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVgXWv6V2xCJrL8V7QBf77oV3oldRUcK
"""

import plotly as py
import plotly.express as px
import pandas as pd
import numpy as np


dg = pd.read_csv('/content/Data avant le nettoyage.csv')
dk=dg

# Nettoyage de la colonne Category:
dg['Category'] = dg['Category'].map(lambda x: str(x).strip()+'"')
dg['Category'] = dg['Category'].map(lambda x: str(x).split("\"")[1])
dg['Category'] = dg['Category'].map(lambda x: str(x).split(" ")[0])
dg = dg[dg['Category'].str.strip().astype(bool)]

# Nettoyage de la colonne Region:
dg['Region'] = dg['Region'].map(lambda x: str(x).strip()+'"')
dg['Region'] = dg['Region'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['Region'].str.strip().astype(bool)]


# Nettoyage de la colonne City:
dg['City'] = dg['City'].map(lambda x: str(x).strip()+'"')
dg['City'] = dg['City'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['City'].str.strip().astype(bool)]


# Nettoyage de la colonne CategoryID:
dg['CategoryID'] = dg['CategoryID'].map(lambda x: str(x).strip()+'"')
dg['CategoryID'] = dg['CategoryID'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['CategoryID'].str.strip().astype(bool)]


# Nettoyage de la colonne Phonenumber:
dg['Phonenumber'] = dg['Phonenumber'].map(lambda x: str(x).strip()+'"')
dg['Phonenumber'] = dg['Phonenumber'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['Phonenumber'].str.strip().astype(bool)]

#Nettoyage de la colonne Ad_id:
dg['Ad_id'] = dg['Ad_id'].map(lambda x: str(x).strip()+'"')
dg['Ad_id'] = dg['Ad_id'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['Ad_id'].str.strip().astype(bool)]

#Nettoyage de la colonne Subject :
pd.options.display.max_colwidth = 10000
dg['subject']=dg['subject'].map(lambda x: str(x).split("\"")[1])

dg['subject']=dg['subject'].map(lambda x: str(x).replace('*',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('x3cbr',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('x3e',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('\\',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('_',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('(',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace(')',''))
dg['subject']=dg['subject'].map(lambda x: str(x).replace('+',''))

#Nettoyage de la colonne price :
dg['price'] = dg['price'].map(lambda x: str(x).strip()+'"')
dg['price'] = dg['price'].map(lambda x: str(x).split("\"")[1])
dg = dg[dg['price'].str.strip().astype(bool)]
dg[['price']] = dg[['price']].astype(int)

# Le annonce le plus cher dans chaque sous catégorie :

dg.sort_values(['price'],ascending=False).groupby('Category').head(1)[['Category','price']]


# Le annonce le plus cher dans chaque ville :
dg.sort_values(['price'],ascending=False).groupby('City').head(1)[['City','price']]


df=dk
# Le nombre d'annonces par sous catégorie :
df.groupby(['Category']).count()['Ad_id']

# Le nombre de d'annonce que chaque personne a fait sur avito :
df.groupby(['Phonenumber']).count()['Ad_id']

# Les annonces que fait chaque personnes dans chaque catégorie avec le prix :

df['N'] = df['Phonenumber'] 
df.sort_values('Phonenumber', inplace=True)
df.set_index(["Phonenumber","N"], inplace=True)
df

# Le nombre d'annonces dans chaque ville :

df.groupby(['City']).count()['Ad_id']

# Le nombre des personnes qui n'ont pas un contact de telephone dans leur annonces :
dg['Phonenumber'].isnull().sum()


# Le nombre d'annonces qui ont été publié sur avito chaque jour dans chaque catégorie:
dg['Date']=dg['Date'].map(lambda x: str(x).split("T")[0])
dg.groupby(['Date','Category']).count()['Ad_id']



# L'annonce le plus cher dans chaque catégorie père :

dg.sort_values(['price','CategoryID'],ascending=False).groupby('CategoryID').head(1)


# Le nombre d'annonces qui ont un prix qui vaut 0 seront considérés comme un spam : 
dg[dg['price']==0].count()['Ad_id']



# La ville qui a bcp d'annonces comme un spam :

dh =dg[dg['price']==0]
dh.groupby(['City']).count().sort_values(['Ad_id'],ascending=False)['Ad_id'].head(1)




# La valeur totale estimée des annonces pour chaque catégorie :

bar_data = dg.groupby(['Category'])['price'].sum().reset_index().sort_values('price', ascending=True)

fig = px.bar(bar_data, x="Category", y="price", color='Category', text = 'Category', orientation='v', height=600,
             title='La valeur totale estimée des annonces pour chaque catégorie')
fig.show()


# La valeur totale estimée des annonces pour chaque catégorie () :
fig = px.pie(dg, values = 'price',names='Category', height=600)
fig.update_traces(textposition='inside', textinfo='percent+label')

fig.update_layout(
    title_x = 0.5,
    geo=dict(
        showframe = False,
        showcoastlines = False,
    ))

fig.show()

# L'evolution des nombres de Spam dans chaque ville  :
line_data = dh.groupby('City').count().reset_index().rename(columns={"price": "Nb.Spam"})

line_data = line_data.melt(id_vars='City', 
                 value_vars=['Nb.Spam'], 
                 var_name='Key', 
                 value_name='Nb.Spam')

fig = px.line(line_data, x="City", y="Nb.Spam", color='Key', 
              title='Variation de Nb.Spam par chaque ville')
fig.show()

# Nb.Annonces de chaque catégorie dans chaque ville
fig = px.bar(dg.groupby(['Category','City']).count().reset_index().reset_index().rename(columns={"Ad_id":"Nb.Annonces"}), x='index', y="Nb.Annonces", color='City', text = 'Category', orientation='v', height=600,
             title='Nb.Annonces de chaque catégorie dans chaque ville')
fig.show()



# La valeur totale estimée des annonces pour chaque catégorie dans chaque ville :
fig = px.bar(dg.groupby(['Category','City'])['price'].sum().reset_index().sort_values('price', ascending=True), x='Category', y="price", color='City', text = 'Category', orientation='v', height=600,
             title='La valeur totale estimée des annonces pour chaque catégorie dans chaque ville :')
fig.show()

# La valeur totale des annonces faites sur Avito chaque jour à partir le Mois September 2019 :


line_data = dg.groupby('Date').sum().reset_index()

line_data = line_data.melt(id_vars='Date', 
                 value_vars=['price'], 
                 var_name='Key', 
                 value_name='price')

fig = px.line(line_data, x="Date", y="price", color='Key', 
              title=' La valeur totale des annonces faites sur Avito chaque jour à partir du Mois September 2019 :')
fig.show()


# La valeur totale estimée des annonces dans chaque catégorie chaque jour :


fig = px.bar(dg.groupby(['Date','Category'])['price'].sum().reset_index().sort_values('price', ascending=True), x='Date', y="price", color='Category', text = 'Category', orientation='v', height=600,
             title='La valeur totale estimée des annonces dans chaque catégorie chaque jour :')
fig.show()